// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  applications Application[]
  reviews      Review[]

  @@map("users")
}

model PermitOffice {
  id          String  @id @default(cuid())
  name        String
  description String?
  address     String
  city        String
  state       String
  zipCode     String
  phone       String?
  email       String?
  website     String?

  // Location data
  latitude  Float?
  longitude Float?

  // Business hours
  hours Json?

  // Office details
  servicesOffered Json?
  permitTypes     Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  applications Application[]
  reviews      Review[]

  @@map("permit_offices")
}

model Application {
  id     String            @id @default(cuid())
  type   String
  status ApplicationStatus @default(DRAFT)

  // User who submitted
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Office handling the application
  permitOfficeId String
  permitOffice   PermitOffice @relation(fields: [permitOfficeId], references: [id], onDelete: Cascade)

  // Application details
  applicationData Json?
  submittedAt     DateTime?
  completedAt     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  documents Document[]

  @@map("applications")
}

model Document {
  id          String @id @default(cuid())
  filename    String
  originalName String
  mimetype    String
  size        Int
  path        String

  // Associated application
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  uploadedAt DateTime @default(now())

  @@map("documents")
}

model Review {
  id      String @id @default(cuid())
  rating  Int    // 1-5 stars
  comment String?

  // User who left the review
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Office being reviewed
  permitOfficeId String
  permitOffice   PermitOffice @relation(fields: [permitOfficeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Prevent duplicate reviews from same user for same office
  @@unique([userId, permitOfficeId])
  @@map("reviews")
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  COMPLETED
}
